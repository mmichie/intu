// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mmichie/intu/internal/fileops (interfaces: FileOperator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	fileops "github.com/mmichie/intu/internal/fileops"
)

// MockFileOperator is a mock of FileOperator interface.
type MockFileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperatorMockRecorder
}

// MockFileOperatorMockRecorder is the mock recorder for MockFileOperator.
type MockFileOperatorMockRecorder struct {
	mock *MockFileOperator
}

// NewMockFileOperator creates a new mock instance.
func NewMockFileOperator(ctrl *gomock.Controller) *MockFileOperator {
	mock := &MockFileOperator{ctrl: ctrl}
	mock.recorder = &MockFileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperator) EXPECT() *MockFileOperatorMockRecorder {
	return m.recorder
}

// FindFiles mocks base method.
func (m *MockFileOperator) FindFiles(arg0 string, arg1 fileops.Options) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFiles", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFiles indicates an expected call of FindFiles.
func (mr *MockFileOperatorMockRecorder) FindFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFiles", reflect.TypeOf((*MockFileOperator)(nil).FindFiles), arg0, arg1)
}

// GetBasicFileInfo mocks base method.
func (m *MockFileOperator) GetBasicFileInfo(arg0, arg1 string) (fileops.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBasicFileInfo", arg0, arg1)
	ret0, _ := ret[0].(fileops.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBasicFileInfo indicates an expected call of GetBasicFileInfo.
func (mr *MockFileOperatorMockRecorder) GetBasicFileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBasicFileInfo", reflect.TypeOf((*MockFileOperator)(nil).GetBasicFileInfo), arg0, arg1)
}

// GetExtendedFileInfo mocks base method.
func (m *MockFileOperator) GetExtendedFileInfo(arg0, arg1 string) (fileops.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExtendedFileInfo", arg0, arg1)
	ret0, _ := ret[0].(fileops.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExtendedFileInfo indicates an expected call of GetExtendedFileInfo.
func (mr *MockFileOperatorMockRecorder) GetExtendedFileInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExtendedFileInfo", reflect.TypeOf((*MockFileOperator)(nil).GetExtendedFileInfo), arg0, arg1)
}

// ReadFile mocks base method.
func (m *MockFileOperator) ReadFile(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile.
func (mr *MockFileOperatorMockRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockFileOperator)(nil).ReadFile), arg0)
}
